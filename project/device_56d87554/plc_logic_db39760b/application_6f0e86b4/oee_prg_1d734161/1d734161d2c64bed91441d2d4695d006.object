{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)1d734161-d2c6-4bed-9144-1d2d4695d006","ParentGuid":"(Guid)6f0e86b4-18a4-4e3d-9377-448004deeefc","Name":"(string)OEE_PRG","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)24568a24-c491-472c-a21f-ee5d33859fab","@Value":{"@Type":"24568a24","@Value":{"MemoryReserveForOnlineChange":"(int)0","ExcludeFromBuild":"(bool)False","External":"(bool)False","EnableSystemCall":"(bool)False","CompilerDefines":"(string)","LinkAlways":"(bool)False","Undefines":{"@Type":"[string]","@Value":[]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"24568a24":"{24568a24-c491-472c-a21f-ee5d33859fab}","2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","bool":"System.Boolean","Guid":"System.Guid","int":"System.Int32","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)// Start timer with a 5-second interval\nfbTimerJson(IN := TRUE, PT := tIntervalJson);\n\n// Start timer with a 5-second interval\nfbTimerData(IN := TRUE, PT := tIntervalData);\n\n// Trigger JSON creation on timer completion\nIF fbTimerJson.Q THEN\n    xCreateJson := TRUE;\n    fbTimerJson(IN := FALSE); // Restart timer\n    fbTimerJson(IN := TRUE);\nEND_IF;\n\n// Trigger data generation on timer completion\nIF fbTimerData.Q THEN\n    xTest := TRUE;\n    fbTimerData(IN := FALSE); // Restart timer\n    fbTimerData(IN := TRUE);\nEND_IF;\n\n\ntopic1 := 'factory/measurements/OEE';\n\n// Force JSON rebuild on Button Press\nIF xFirst THEN\n    // Recreate JSON object from factory\n    pJsonData := factory.Create();\n\n    // Reinitialize Builder\n    fb_Builder(pJsonData := pJsonData);\n\n    // Build new JSON structure\n    fb_Builder.SetKeyWithValue(TO_WSTRING('OEE'), OEE);\n    fb_Builder.SetKeyWithValue(TO_WSTRING('Performance'), Performance);\n    fb_Builder.SetKeyWithValue(TO_WSTRING('Quality'), Quality);\n    fb_Builder.SetKeyWithValue(TO_WSTRING('Availability'), Availability);\n    fb_Builder.SetKeyWithValue(TO_WSTRING('MachineState'), MachineState);\n    fb_Builder.SetKeyWithValue(TO_WSTRING('GoodParts'), GoodParts);\n    fb_Builder.SetKeyWithValue(TO_WSTRING('BadParts'), BadParts);\n    fb_Builder.SetKeyWithValue(TO_WSTRING('ProductWeight'), ProductWeight);\n\n    // Complete and reset trigger\n    IF fb_Writer.xDone THEN\n        eError := fb_Writer.eError;\n        xFirst := FALSE;\n    END_IF;\nEND_IF;\n\nIF xCreateJson THEN\n    // Reinitialize Builder\n    fb_Builder.Reset();\n    fb_Builder(pJsonData := pJsonData);\n\n    // Build new JSON structure\n    fb_Builder.SetKeyWithValue(TO_WSTRING('OEE'), OEE);\n    fb_Builder.SetKeyWithValue(TO_WSTRING('Performance'), Performance);\n    fb_Builder.SetKeyWithValue(TO_WSTRING('Quality'), Quality);\n    fb_Builder.SetKeyWithValue(TO_WSTRING('Availability'), Availability);\n    fb_Builder.SetKeyWithValue(TO_WSTRING('MachineState'), MachineState);\n    fb_Builder.SetKeyWithValue(TO_WSTRING('GoodParts'), GoodParts);\n    fb_Builder.SetKeyWithValue(TO_WSTRING('BadParts'), BadParts);\n    fb_Builder.SetKeyWithValue(TO_WSTRING('ProductWeight'), ProductWeight);\n\n    // Complete and reset trigger\n    IF fb_Writer.xDone THEN\n        eError := fb_Writer.eError;\n        xCreateJson := FALSE;\n    END_IF;\nEND_IF;\n\n// Execute JSON writer with edge control\nfb_Writer(\n\txExecute := xFirst OR xCreateJson,\n\tpwData := ADR(wsJsonData),\n\tudiSize := SIZEOF(wsJsonData),\n\tjsonData := pJsonData^\n);\n    \nR_TRIG1(CLK:= xTest, Q=> );\n// Random data generation for OEE and production metrics\nIF R_TRIG1.Q THEN\n    // Random values between 30 and 95 for OEE, Performance, Quality, and Availability\n    OEE := 30.0 + RANDOM() * 65.0;          // 30 to 95\n    Performance := 30.0 + RANDOM() * 65.0;  // 30 to 95\n    Quality := 30.0 + RANDOM() * 65.0;      // 30 to 95\n    Availability := 30.0 + RANDOM() * 65.0; // 30 to 95\n\n    // Simulating machine state: Running (0) or Stopped (1)\n    IF RANDOM() > 0.5 THEN\n        MachineState := 0;  // Running\n    ELSE\n        MachineState := 1;  // Stopped\n    END_IF;\n\n    // Production part counts: Random increments\n    GoodParts := GoodParts + 1 + TO_INT(RANDOM() * 5); // 1 to 5 good parts\n    BadParts := BadParts + TO_INT(RANDOM() * 3);       // 0 to 3 bad parts\n\n    // Simulate product weight variations (e.g., 5040 to 5095 grams)\n    ProductWeight := 4000.0 + RANDOM() * 1775.0; // 4000 to 5775 grams\n\n    // Restart timer for next update\n    Timer(IN := FALSE);\n    Timer(IN := TRUE);\n\n    // Test flag reset\n    xTest := FALSE;\nEND_IF;","LineInfoPersistence":"(string)1d734161-d2c6-4bed-9144-1d2d4695d006_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)PROGRAM OEE_PRG\nVAR\n    // MQTT Client configuration\n    mqttClient : MQTT.MQTTClient;\n    MQTT_Payload : STRING(255);\n\n    // Production data\n    OEE : REAL := 50.0; // Overall Equipment Effectiveness\n    Performance : REAL := 75.0; // Machine performance percentage\n    Quality : REAL := 80.0; // Quality percentage\n    Availability : REAL := 95.0; // Machine availability percentage\n    \n    // Machine status\n\tMachineState: INT := 0;\n    GoodParts : INT := 0; // Number of good parts produced\n    BadParts : INT := 0; // Number of defective parts\n    ProductWeight : REAL := 5040.0; // Weight of the product\n\n    // Timer for data updates\n    Timer : TON;\n\t\n\ttopic1: STRING;\n\txTest: BOOL;\n\tr_trig1: R_trig;\n\t\n\t// JSON builder\n\tfactory :JSON.JSONDataFactory;\n    fb_Builder : JSON.JSONBuilder;\n    pJsonData : POINTER TO JSON.JSONData := factory.Create(); //:= factory.Create();\n    diRootIndex, diObjectIndex : DINT;\n    wsJsonData : WSTRING(1000);\n    xFirst : BOOL := TRUE;\n\tfb_Writer: JSON.JSONByteArrayWriter;\n\teError : JSON.ERROR; // Kod błędu\n\tXjsON: BOOL;\n\txCreateJson: BOOL;\n\t\n\t// timer for creating json\n\tfbTimerJson : TON;             // Timer for periodic trigger\n    tIntervalJson : TIME := T#5S; // 5-second interval\n\t\n\t// timer for generating data\n\tfbTimerData : TON;             // Timer for periodic trigger\n    tIntervalData : TIME := T#4S; // 5-second interval\nEND_VAR\n","LineInfoPersistence":"(string)1d734161-d2c6-4bed-9144-1d2d4695d006_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)678","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}